#include <iostream>

using namespace std;

// Singly Linked List Node
struct SinglyNode {
    int data;
    SinglyNode* next;
};

// Doubly Linked List Node
struct DoublyNode {
    int data;
    DoublyNode* next;
    DoublyNode* prev;
};

// Circular Linked List Node (using the SinglyNode structure)

// --- Singly Linked List Functions ---
void insertSingly(SinglyNode*& head, int data) {
    SinglyNode* newNode = new SinglyNode{data, nullptr};
    if (!head) {
        head = newNode;
    } else {
        SinglyNode* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void displaySingly(SinglyNode* head) {
    while (head) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

// --- Doubly Linked List Functions ---
void insertDoubly(DoublyNode*& head, int data) {
    DoublyNode* newNode = new DoublyNode{data, nullptr, nullptr};
    if (!head) {
        head = newNode;
    } else {
        DoublyNode* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

void displayDoubly(DoublyNode* head) {
    while (head) {
        cout << head->data << " <-> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

// --- Circular Linked List Functions ---
void insertCircular(SinglyNode*& head, int data) {  // Using SinglyNode for circular list
    SinglyNode* newNode = new SinglyNode{data, nullptr};
    if (!head) {
        head = newNode;
        newNode->next = head; // Point to itself for circularity
    } else {
        SinglyNode* temp = head;
        while (temp->next != head) { // Traverse until you reach the head again
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head; // Make the last node point to the head
    }
}

void displayCircular(SinglyNode* head) {
    if (!head) return;

    SinglyNode* temp = head;
    do {
        cout << temp->data << " -> ";
        temp = temp->next;
    } while (temp != head); // Stop when you reach the head again
    cout << " (Back to Head)" << endl;
}


int main() {
    // Singly Linked List
    SinglyNode* singlyHead = nullptr;
    insertSingly(singlyHead, 10);
    insertSingly(singlyHead, 20);
    insertSingly(singlyHead, 30);
    cout << "Singly Linked List: ";
    displaySingly(singlyHead);

    // Doubly Linked List
    DoublyNode* doublyHead = nullptr;
    insertDoubly(doublyHead, 100);
    insertDoubly(doublyHead, 200);
    insertDoubly(doublyHead, 300);
    cout << "Doubly Linked List: ";
    displayDoubly(doublyHead);

    // Circular Linked List
    SinglyNode* circularHead = nullptr;
    insertCircular(circularHead, 1);
    insertCircular(circularHead, 2);
    insertCircular(circularHead, 3);
    cout << "Circular Linked List: ";
    displayCircular(circularHead);

    return 0;
}
