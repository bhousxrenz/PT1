#include <iostream>
#include <vector>
#include <algorithm> // For std::sort, std::binary_search, etc.
#include <numeric>   // For std::iota (used in example data)

using namespace std;

// Function to print a vector
void printVector(const vector<int>& vec) {
    for (int val : vec) {
        cout << val << " ";
    }
    cout << endl;
}

int main() {
    // Example data (unsorted)
    vector<int> data(20);
    iota(data.begin(), data.end(), 0); // Fill with 0, 1, 2, ..., 19
    random_shuffle(data.begin(), data.end()); // Shuffle the data

    cout << "Unsorted data: ";
    printVector(data);

    // 1. Sorting Algorithms:

    // a. std::sort (IntroSort - hybrid of quicksort, heapsort, insertion sort)
    vector<int> sortedData = data; // Make a copy
    sort(sortedData.begin(), sortedData.end());
    cout << "\nSorted data (std::sort): ";
    printVector(sortedData);

    // b. std::stable_sort (preserves relative order of equal elements)
    vector<int> stableSortedData = data;
    stable_sort(stableSortedData.begin(), stableSortedData.end());
    cout << "Sorted data (std::stable_sort): ";
    printVector(stableSortedData);


    // 2. Searching Algorithms:

    // a. std::binary_search (requires sorted data)
    if (binary_search(sortedData.begin(), sortedData.end(), 15)) {
        cout << "\n15 found using binary_search" << endl;
    } else {
        cout << "\n15 not found using binary_search" << endl;
    }

    // b. std::lower_bound (requires sorted data)
    auto lowerBound = lower_bound(sortedData.begin(), sortedData.end(), 10);
    cout << "Lower bound of 10: " << *lowerBound << " (at index " << lowerBound - sortedData.begin() << ")" << endl;

    // c. std::upper_bound (requires sorted data)
    auto upperBound = upper_bound(sortedData.begin(), sortedData.end(), 10);
    cout << "Upper bound of 10: " << *upperBound << " (at index " << upperBound - sortedData.begin() << ")" << endl;

    // d. std::find (for unsorted data)
    auto it = find(data.begin(), data.end(), 12);
    if (it != data.end()) {
        cout << "12 found using std::find (at index " << it - data.begin() << ")" << endl;
    } else {
        cout << "12 not found using std::find" << endl;
    }


    // 3. Other Useful Algorithms:

    // a. std::min_element, std::max_element
    auto minIt = min_element(data.begin(), data.end());
    auto maxIt = max_element(data.begin(), data.end());
    cout << "\nMin element: " << *minIt << " (at index " << minIt - data.begin() << ")" << endl;
    cout << "Max element: " << *maxIt << " (at index " << maxIt - data.begin() << ")" << endl;

    // b. std::reverse
    reverse(data.begin(), data.end());
    cout << "\nReversed data: ";
    printVector(data);

    return 0;
}
